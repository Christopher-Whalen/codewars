"""
Description: Deoxyribonucleic acid (DNA) is a chemical found in the 
nucleus of cells and carries the "instructions" for the development 
and functioning of living organisms. If you want to know more 
http://en.wikipedia.org/wiki/DNA

In DNA strings, symbols "A" and "T" are complements of each other, 
as "C" and "G". You have function with one side of the DNA (string, 
except for Haskell); you need to get the other complementary side. 
DNA strand is never empty or there is no DNA at all (again, except 
for Haskell).

DNA_strand ("ATTGC") # return "TAACG"
DNA_strand ("GTAT") # return "CATA"
"""

"""
#My Solution
def DNA_strand(strand):
    i = 0
    inputDNA = list(strand)
    complementDNA = []
    while i < len(strand):
        if inputDNA[i] == "A":
            complementDNA.append("T")
        elif inputDNA[i] == "T":
            complementDNA.append("A")
        elif inputDNA[i] == "C":
            complementDNA.append("G")
        elif inputDNA[i] == "G":
            complementDNA.append("C")
        else:
            break
        i += 1
    return ''.join(complementDNA)
"""

#Best Practices Solution
import string
def DNA_strand(dna):
    return dna.translate(string.maketrans("ATCG","TAGC"))
    # Python 3.4 solution || you don't need to import anything :)
    # return dna.translate(str.maketrans("ATCG","TAGC"))
